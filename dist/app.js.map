{"version":3,"sources":["webpack://starteronly/./js/Class/Modal.js","webpack://starteronly/./js/formConfig.js","webpack://starteronly/./js/index.js","webpack://starteronly/./js/nav.js","webpack://starteronly/./js/Class/Validator.js"],"names":["Modal","modalbg","document","querySelector","modalBtn","querySelectorAll","closeBtn","closeConfirm","modalConfirm","form","getElementsByName","dom","forEach","btn","addEventListener","launchModal","closeModal","style","display","classList","remove","add","formFields","firstName","element","getElementById","validationType","invalidMessage","lastName","email","birthdate","quantity","location","checkbox","fieldContainer","window","editNav","x","className","launchModalEvent","validator","state","name","value","length","test","number","radio","checked","date","setFormValid","Array","from","map","field","dataset","errorVisible","input","parentNode","setAttribute","resetValidation","nameValidation","invalidInputStyle","emailValidation","numberValidation","radioValidation","checkboxValidation","dateValidation","getFormValid","this","formName","onsubmit","event","console","log","preventDefault","values","Object","keys","formFieldsKey","target","launchValidation","reset"],"mappings":"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","file":"app.bundle.js","sourcesContent":["// Création de la classe Modal afin de gérer\n// l'affiche du formulaire et la fenetre de confirmation avec la fermeture\nexport default class Modal {\n  // Elements du DOM\n  static dom = {\n    modalbg: document.querySelector(\".bground\"),\n    modalBtn: document.querySelectorAll(\".modal-btn\"),\n    closeBtn: document.querySelector(\".close\"),\n    closeConfirm: document.querySelector(\".close-confirm\"),\n    modalConfirm: document.querySelector(\".confirm-modal\"),\n    form: document.getElementsByName(\"reserve\")[0],\n  };\n\n  // On lance l'événement modal, \n  // On ajoute un Event/Listener sur le click pour ouvrir ou fermer le formulaire\n  // ainsi que le fenetre de confirmation\n  static launchModalEvent = () => {\n    this.dom.modalBtn.forEach((btn) =>\n      btn.addEventListener(\"click\", this.launchModal)\n    );\n    \n    this.dom.closeBtn.addEventListener(\"click\", this.closeModal);\n    this.dom.closeBtn.addEventListener(\"click\", this.closeConfirm);\n    this.dom.closeConfirm.addEventListener(\"click\", this.closeConfirm);\n\n  };\n\n  // On lance le formulaire modal, \n  // On affiche le modal avec le mode d'affichage css \"block\"\n  static launchModal = () => (this.dom.modalbg.style.display = \"block\");\n\n  // Fermeture du modal, \n  // On masque le modal avec la propriété css \"none\"\n  static closeModal = () => (this.dom.modalbg.style.display = \"none\");\n\n  // On supprime la confirmation du modal, \n  // On réinitialise l'affichage du modal\n  static closeConfirm = () => {\n    this.closeModal();\n    this.dom.form.style.display = \"block\";\n    this.dom.modalConfirm.style.display = \"none\";\n    this.dom.modalConfirm.classList.remove(\"confirm-message\");\n  };\n\n  // Affichage du message de confirmation \n  // et on masque le formulaire\n  static validation = () => {\n    this.dom.form.style.display = \"none\";\n    this.dom.modalConfirm.style.display = \"block\";\n    this.dom.modalConfirm.classList.add(\"confirm-message\");\n  };\n}\n","// Constante pour récupérer les id des input du formulaire\n// Type de validation\n// et Messages d'invalidité\nconst formFields = {\n  firstName: {\n    element: document.getElementById(\"first\"),\n    validationType: \"name\",\n    invalidMessage: \"Veuillez entrer 2 caractères ou plus pour le champ du prénom.\"\n  },\n  lastName: {\n    element: document.getElementById(\"last\"),\n    validationType: \"name\",\n    invalidMessage: \"Veuillez entrer 2 caractères ou plus pour le champ du nom.\"\n  },\n  email: {\n    element: document.getElementById(\"email\"),\n    validationType: \"email\",\n    invalidMessage: \"Veuillez entrer une adresse mail valide.\"\n  },\n  birthdate: {\n    element: document.getElementById(\"birthdate\"),\n    validationType: \"date\",\n    invalidMessage: \"Vous devez entrer votre date de naissance.\"\n  },\n  quantity: {\n    element: document.getElementById(\"quantity\"),\n    validationType: \"number\",\n    invalidMessage: \"Veuillez entrer un nombre.\"\n  },\n  location: {\n    element: document.querySelectorAll('input[name=\"location\"]'),\n    validationType: \"radio\",\n    invalidMessage: \"Veuillez selectionner une ville.\"\n  },\n  checkbox: {\n    element: document.getElementById(\"checkbox1\"),\n    validationType: \"checkbox\",\n    invalidMessage: \"Vous devez vérifier que vous acceptez les termes et conditions.\"\n  },\n};\n\n// Constante contenant toutes les input du formulaire\nconst fieldContainer = document.querySelectorAll(\".formData\");\n\nexport { formFields, fieldContainer};\n","import editNav from \"./nav.js\";\nimport Modal from \"./Class/Modal.js\";\nimport Validator from \"./Class/Validator.js\";\nimport {formFields, fieldContainer} from \"./formConfig.js\";\n\n// La fonction utilisée sur onclick=\"editNav()\" doit être globale,\n// en l'attribuant à la propriété window.\nwindow.editNav = editNav;\n\n// Initialisation du modal\nModal.launchModalEvent();\n\n// Instanciation de la classe Validator\n// en ajoutant en arguments les constantes du fichier formConfig.js\nconst validator = new Validator(fieldContainer, formFields);\n\n// Constante pour récupérer le formulaire par le nom\nconst formName = document.getElementsByName(\"reserve\")[0];\n\n// Fonction du formaulaire avec submit\n// on empeche l'envoie de celui ci\n// On réinitialise et on envoie le formulaire après validation \nformName.onsubmit = (event) => {\nconsole.log(\"toto\");\n  event.preventDefault();\n  const values = {};\n  Object.keys(formFields).forEach((formFieldsKey) => {\n    const element = formFields[formFieldsKey].element;\n    const value = element && element.target && element.target.value;\n    values[formFieldsKey] = value;\n  })\n  console.log(values);\n  if (validator.launchValidation()) {\n    \n    formName.reset();\n    Modal.validation();\n    \n\n  }\n\n};\n","export default function editNav() {\n\n  var x = document.getElementById(\"myTopnav\");\n\n  if (x.className === \"topnav\") {\n\n    x.className += \" responsive\";\n\n  } else {\n\n    x.className = \"topnav\";\n\n  }\n\n}","// Création de la classe Validator\nexport default class Validator {\n\n  #formValid = true;\n\n  constructor(fieldContainer, formFields) {\n\n    this.fieldContainer = fieldContainer;\n\n    this.formFields = formFields;\n\n  }\n  // Fonction qui flag si on a passé tous les tests de validation\n  // qui sera donc a true.\n  getFormValid = () => this.#formValid;\n  // Fonction avec un paramètre a true, qui passera a false si un message n'est pas valide\n  setFormValid = (state) => (this.#formValid = state);\n\n  // Fonctions pour les controles sur les différents types de validation\n  nameValidation = (name) =>\n    name.value !== null && name.value.length >= 2 ? true : false;\n\n  emailValidation = (email) =>\n    /^([a-z0-9_\\.-]+\\@[\\da-z\\.-]+\\.[a-z\\.]{2,6})$/.test(email.value);\n\n  numberValidation = (number) => /^[0-9]+$/.test(number.value);\n\n  radioValidation = (radio) => {\n    for (let element of radio) if (element.checked) return true;\n  };\n\n  checkboxValidation = (checkbox) => checkbox.checked;\n\n  dateValidation = (date) => (date.value != \"\" ? true : false);\n\n  // Réinitialise les erreurs sur les input  \n  // et définit la valeur par défaut pour la propriété #formValid\n  resetValidation = () => {\n\n    this.setFormValid(true);\n\n    Array.from(this.fieldContainer).map((field) => {\n\n      field.dataset.errorVisible = false;\n\n    });\n\n  };\n\n  // Ajout des styles css pour les input invalides et affichage des messages\n  invalidInputStyle = (input, invalidMessage) => {\n\n    input.parentNode.setAttribute(\"data-error-visible\", true);\n\n    input.parentNode.setAttribute(\"data-error\", invalidMessage);\n\n  };\n\n  // Vérification de la validité des saisies des différents types des input\n  // pour chaque élément de formFields\n  launchValidation = () => {\n    // Validation du formulaire réinitialisée\n    this.resetValidation();\n    // Boucle pour chaque input du formulaire\n    // avec un switch pour check les différents type d'input\n    // et afficher un message d'erreur si la saisie n'est pas conforme\n    for (const field in this.formFields) {\n      // On test les différents cas sur le type de validation du FormFields\n      switch (this.formFields[field].validationType) {\n\n        case \"name\":\n\n          if (!this.nameValidation(this.formFields[field].element)) {\n\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n\n            this.setFormValid(false);\n\n          }\n\n          break;\n\n        case \"email\":\n\n          if (!this.emailValidation(this.formFields[field].element)) {\n\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n\n            this.setFormValid(false);\n\n          }\n\n          break;\n\n        case \"number\":\n\n          if (!this.numberValidation(this.formFields[field].element)) {\n\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n\n            this.setFormValid(false);\n\n          }\n\n          break;\n\n        case \"radio\":\n\n          if (!this.radioValidation(this.formFields[field].element)) {\n\n            this.invalidInputStyle(\n              this.formFields[field].element[0],\n              this.formFields[field].invalidMessage\n            );\n\n            this.setFormValid(false);\n\n          }\n\n          break;\n\n        case \"checkbox\":\n\n          if (!this.checkboxValidation(this.formFields[field].element)) {\n\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n\n            this.setFormValid(false);\n\n          }\n\n          break;\n\n        case \"date\":\n\n          if (!this.dateValidation(this.formFields[field].element)) {\n\n            this.invalidInputStyle(\n              this.formFields[field].element,\n              this.formFields[field].invalidMessage\n            );\n\n            this.setFormValid(false);\n\n          }\n\n          break;\n\n        default:\n\n          break;\n      }\n\n    }\n\n    return this.getFormValid();\n\n  };\n\n}\n"],"sourceRoot":""}